#!/bin/sh

# Copyright (C) 2012 Oregon State University
# Copyright (C) 2013, 2014, 2015 GRNET S.A.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

set -e

# presets
IMAGE_TYPE=''
IMAGE_DIR=''
IMAGE_NAME=''
ARCH=''
INSTANCE_NAME=''
SCRIPT_NAME="$(basename "$0")"

# functions
usage() {
    cat <<EOF
Usage: $SCRIPT_NAME [OPTIONS] INSTANCE_NAME

Apply an image of a ganeti instance from either a tarball, dump,
or qemu image.

ARGS:
 INSTANCE_NAME    Name of the instance

OPTIONS:
 -t IMAGE_TYPE    Image type, either: tarball, dump, or qemu
 -d IMAGE_DIR     Path of the image directory
 -n IMAGE_NAME    Name of the image
 -a ARCH          Architecture of the image
EOF
}

croak() { usage >&2; printf "$@" | sed -e "s/^/${SCRIPT_NAME}: /" >&2; exit 1; }

# getopts
while getopts ':t:d:n:a:h' _opt; do
    case "$_opt" in
        t)
            IMAGE_TYPE="$OPTARG"
            ;;
        d)
            IMAGE_DIR="$OPTARG"
            ;;
        n)
            IMAGE_NAME="$OPTARG"
            ;;
        a)
            ARCH="$OPTARG"
            ;;
        h)
            usage
            exit 0
            ;;
        *)
            croak 'Unknown option "-%s"\n' "$OPTARG"
            ;;
    esac
done
shift `expr $OPTIND - 1 || :`
INSTANCE_NAME="$1"

# sanity checks
test -n "$INSTANCE_NAME" || croak 'Error: INSTANCE_NAME not set\n'
test -n "$IMAGE_TYPE" || croak 'Error: IMAGE_TYPE not set\n'
test -n "$IMAGE_DIR" || croak 'Error: IMAGE_DIR not set\n'
test -d "$IMAGE_DIR" || croak 'Error: IMAGE_DIR "%s" not found\n' "$IMAGE_DIR"
test -n "$IMAGE_NAME" || croak 'Error: IMAGE_NAME not set\n'
test -n "$ARCH" || croak 'Error: ARCH not set\n'
test -n "$DISK_0_PATH" || croak 'Error: DISK_0_PATH not set\n'
test -n "$OS_VARIANT" || croak 'Error: OS_VARIANT not set\n'
test -n "$HYPERVISOR" || croak 'Error: HYPERVISOR not set\n'
test -n "$DISK_COUNT" || croak 'Error: DISK_COUNT not set\n'
test -n "$OS_API_VERSION" || croak 'Error: OS_API_VERSION not set\n'
case "$IMAGE_TYPE" in
    tarball|dump|qemu)
        :
        ;;
    *)
        die 'Image type "%s" not supported!\n' "$IMAGE_TYPE"
        ;;
esac
# source functions
. "@osdir@/@osname@/common.sh"
debug set -x

# main
losetup_blockdev
map_all
case "$IMAGE_TYPE" in
    tarball)
        mkdir_disk0_temp
        mount_disk0
        verbprint 'Extracting "%s" from tarball at "%s/%s-%s.tar.gz"\n' "$INSTANCE_NAME" "$IMAGE_DIR" "$IMAGE_NAME" "$ARCH"
        tarball_extract "${IMAGE_DIR}/${IMAGE_NAME}-${ARCH}.tar.gz"
        ;;
    dump)
        verbprint 'Extracting "%s" from dump archive at "%s/%s-%s-{root,boot}.dump"\n' "$INSTANCE_NAME" "$IMAGE_DIR" "$IMAGE_NAME" "$ARCH"
        dump_extract "${IMAGE_DIR}/${IMAGE_NAME}-${ARCH}-root.dump"
        ;;
    qemu)
        verbprint 'Extracting "%s" from qemu image at "%s/%s-%s.img"\n' "$INSTANCE_NAME" "$IMAGE_DIR" "$IMAGE_NAME" "$ARCH"
        qemu_extract "${IMAGE_DIR}/${IMAGE_NAME}-${ARCH}.img"
        ;;
esac
verbprint '"%s" finished\n' "$INSTANCE_NAME"
