#!/bin/sh

# Copyright (C) 2012 Oregon State University
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

set -e

# presets
IMAGE_TYPE=''
IMAGE_DIR=''
IMAGE_NAME=''
ARCH=''
SCRIPT_NAME="$(basename "$0")"
INSTANCE_NAME=''

# functions
run_help() {
    cat <<EOF
Usage: $SCRIPT_NAME [OPTIONS] INSTANCE_NAME

Create an image of a ganeti instance using either a tarball, dump,
or qemu image.

ARGS:
 INSTANCE_NAME    Name of the instance

OPTIONS:
 -t IMAGE_TYPE    Image type, either: tarball, dump, or qemu
 -d IMAGE_DIR     Path of where to put the image
 -n IMAGE_NAME    Name of the image
 -a ARCH          Architecture of the image
EOF
}

# getopts
while getopts 't:d:n:a:h' _opt; do
    case "$_opt" in
        t)
            IMAGE_TYPE="$OPTARG"
            ;;
        d)
            IMAGE_DIR="$OPTARG"
            ;;
        n)
            IMAGE_NAME="$OPTARG"
            ;;
        a)
            ARCH="$OPTARG"
            ;;
        h)
            run_help
            exit 0
            ;;
        *)
            run_help
            exit 1
            ;;
    esac
done
INSTANCE_NAME="$1"

# sanity checks
test -n "$INSTANCE_NAME" || die 'Error: INSTANCE_NAME not set\n'
test -n "$IMAGE_TYPE" || die 'Error: IMAGE_TYPE not set\n'
test -n "$IMAGE_DIR" || die 'Error: IMAGE_DIR not set\n'
test -d "$IMAGE_DIR" || die 'Error: IMAGE_DIR "%s" not found\n' "$IMAGE_DIR"
test -n "$IMAGE_NAME" || die 'Error: IMAGE_NAME not set\n'
test -n "$ARCH" || die 'Error: ARCH not set\n'
test -n "$DISK_0_PATH" || die 'Error: DISK_0_PATH not set\n'
test -n "$OS_VARIANT" || die 'Error: OS_VARIANT not set\n'
test -n "$HYPERVISOR" || die 'Error: HYPERVISOR not set\n'
test -n "$DISK_COUNT" || die 'Error: DISK_COUNT not set\n'
test -n "$INSTANCE_HV_kernel_path" || die 'Error: INSTANCE_HV_kernel_path not set\n'
test -n "$OS_API_VERSION" || die 'Error: OS_API_VERSION not set\n'

# source functions
. "@osdir@/@osname@/common.sh"
debug set -x

# main
map_all
case "$IMAGE_TYPE" in
    tarball)
        mount_disk0 'temp'
        cd "$TARGET"
        verbprint 'Creating tarball from %s to %s/%s-%s.tar.gz\n' "$INSTANCE_NAME" "$IMAGE_DIR" "$IMAGE_NAME" "$ARCH"
        if test -x /usr/bin/pigz; then
            tar -I /usr/bin/pigz --numeric-owner -cpf "${IMAGE_DIR}/${IMAGE_NAME}-${ARCH}.tar.gz" .
        else
            tar --numeric-owner -zcpf "${IMAGE_DIR}/${IMAGE_NAME}-${ARCH}.tar.gz" .
        fi
        ;;
    dump)
        if test -n "$boot_dev"; then
            verbprint 'Creating dump from %s for boot at %s/%s-%s-boot.dump\n' "$INSTANCE_NAME" "$IMAGE_DIR" "$IMAGE_NAME" "$ARCH"
            "$DUMP" -0 -q -z9 -f "${IMAGE_DIR}/${IMAGE_NAME}-${ARCH}-boot.dump" "$boot_dev" 2>/dev/null
        fi
        verbprint 'Creating dump from %s for boot at %s/%s-%s-root.dump\n' "$INSTANCE_NAME" "$IMAGE_DIR" "$IMAGE_NAME" "$ARCH"
        "$DUMP" -0 -q -z9 -f "${IMAGE_DIR}/${IMAGE_NAME}-${ARCH}-root.dump" "$root_dev" 2>/dev/null
        ;;
    qemu)
        verbprint 'Creating qemu image from %s to %s/%s-%s.img\n' "$INSTANCE_NAME" "$IMAGE_DIR" "$IMAGE_NAME" "$ARCH"
        "$QEMU_IMG" convert -O qcow2 -c "$DISK_0_PATH" "${IMAGE_DIR}/${IMAGE_NAME}-${ARCH}.img"
        ;;
    *)
        die 'Command "%s" not supported!\n' "$IMAGE_TYPE"
        ;;
esac
