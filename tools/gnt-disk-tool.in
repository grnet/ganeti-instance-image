#!/bin/sh

# Copyright (C) 2012 Oregon State University
# Copyright (C) 2013, 2014, 2015 GRNET S.A.
#
# (originally named ganeti-image.in)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

set -e
test -z "$GANETI_DEBUG" || set -x

# presets
IMAGE_TYPE=''
IMAGE_DIR=''
IMAGE_NAME=''
ARCH=''
MAP=0
MOUNT=0
READONLY=0
RESIZE=''
SUBCOMMAND=''
INSTANCE_NAME=''
SCRIPT_NAME="$(basename "$0")"
VERBOSE=0

# functions
usage() {
    cat <<EOF
Usage: $SCRIPT_NAME SUBCOMMAND [OPTIONS] INSTANCE_NAME

Wrapper for ganeti-instance-image sub-commands.

ARGS:
 SUBCOMMAND       Which subcommand to use (make-image, apply-image,
                  mount-disks, umount-disks, show, shrink, expand, shell,
                  chroot, noop)
 INSTANCE_NAME    Name of the instance

OPTIONS:
 -h, --help             : This output
 -v, --verbose          : Verbose output
 -t, --type IMAGE_TYPE  : Type of image, either: tarball, dump, or qemu
 -d, --dir IMAGE_DIR    : Path of where to put the image
 -n, --name IMAGE_NAME  : Name of the image
 -a, --arch ARCH        : Architecture of the image
 -m, --map              : Map partitions
 -M, --mount            : Mount/Unmount filesystems to a tempdir
 -r, --readonly         : Ensure any mounting is readonly
 -R, --resize OBJECT    : OBJECT:
                           filesystem: resize FS (default)
                           partition: resize FS and partition (if possible)
                           disk: resize FS, partition and disk (if possible)

ACTIONS:

 make-image             : Make image file for the instance's disks
 apply-image            : Apply an image file to an instance's disks
 mount-disks            : Mount the instance's disks to a tempdir
 umount-disks           : Unmount the instance's disks from a tempdir
 show                   : Show "fdisk -l", with -m also "dumpe2fs -h",
                          with -M also "df"
 shrink                 : Shrink instance's root FS to minimal size
 expand                 : Expand instance's root FS to maximal size
 shell                  : Drop to interactive shell after setting up disk (and
                          maps/mounts depending on -m, -M)
 chroot                 : Same as "shell" but chroot to mounted root FS
                          (forces -m and -M)
 noop (or '')           : Just does setup/tear-down of disk (and maps/mounts
                          depending on -m, -M)

This utility must be used on the master node. All optional args will have
defaults if you do not set them.

NB: the sub-commands *run on the instance's primary node* (so mounted disks
will be on the node of course, which is not necessarily the master node).
EOF
}

vm_is_running() { test 'running' = "`gnt-instance list -o status --no-headers "$INSTANCE_NAME"`"; }
printerr() { printf "$@" | sed -e "s/^/${SCRIPT_NAME}: /" >&2; }
die() { printerr "$@"; exit 1; }
croak() { usage >&2; die "$@"; }
verbprint() { test 0 -eq $VERBOSE || printerr "$@"; }

# get and sanity-check subcommand
case "$1" in
    make-image|apply-image|mount-disks|umount-disks|show|shrink|expand|shell|chroot|noop)
        SUBCOMMAND="$1"
        shift
        ;;
    -h|--help)
        exec "$0" noop -h
        ;;
    *)
        croak 'Subcommand "%s" not implemented\n' "$1"
        ;;
esac

# getopts
while test $# -gt 0; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        -t|--type)
            IMAGE_TYPE="$2"
            shift
            ;;
        -d|--dir)
            IMAGE_DIR="$2"
            shift 2
            ;;
        -n|--name)
            IMAGE_NAME="$2"
            shift 2
            ;;
        -a|--arch)
            ARCH="$2"
            shift 2
            ;;
        -m|--map)
            MAP=1
            shift
            ;;
        -M|--mount)
            MOUNT=1
            shift
            ;;
        -r|--readonly)
            READONLY=1
            shift
            ;;
        -R|--resize)
            RESIZE="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        -*)
            croak 'Unknown option "%s"\n' "$1"
            ;;
        *)
            break
            ;;
    esac
done
test 0 -eq $MOUNT || MAP=1
INSTANCE_NAME="$1"
shift

# sanity checks
test -n "$INSTANCE_NAME" || croak 'Instance name not set\n'
case "$IMAGE_TYPE" in
    tarball|dump|qemu|'')
        :
        ;;
    *)
        croak 'Unknown image-type "%s" (not qemu|tarball|dump)\n' "$IMAGE_TYPE"
        ;;
esac
case "$RESIZE" in
    filesystem|partition|disk|'')
        :
        ;;
    *)
        croak 'Unknown resize object type "%s" (not filesystem|partition|disk)\n' "$RESIZE"
        ;;
esac
MASTER_NODE="`gnt-cluster getmaster`"
HOSTNAME="`hostname -f`"
test "x$MASTER_NODE" = "x$HOSTNAME" || \
    die 'ERROR: Command must be run from master node "%s", not "%s"\n' "$MASTER_NODE" "$HOSTNAME"

## TODO: $ARCH might be able to be set from ganeti here, rather than manually by flag?
# env vars
output="$(gnt-instance activate-disks "$INSTANCE_NAME" | grep ':disk/0:')"
trap "gnt-instance deactivate-disks \"$INSTANCE_NAME\"" EXIT
info="$(gnt-instance list -o os,hypervisor,disk.count,hv/kernel_path --no-headers --separator='|' "$INSTANCE_NAME")"
NODE="`printf '%s' "$output" | cut -d: -f1`"
DISK_0_PATH="`printf '%s' "$output" | cut -d: -f3`"
OS_VARIANT="`printf '%s' "$info" | cut -d\| -f1 | sed -e 's/^.*+//'`"
HYPERVISOR="`printf '%s' "$info" | cut -d\| -f2`"
DISK_COUNT="`printf '%s' "$info" | cut -d\| -f3`"
INSTANCE_HV_kernel_path="`printf '%s' "$info" | cut -d\| -f4`"
OS_API_VERSION=20

# main
eval_string="
    DISK_0_PATH=\"$DISK_0_PATH\"
    OS_VARIANT=\"$OS_VARIANT\"
    HYPERVISOR=\"$HYPERVISOR\"
    DISK_COUNT=\"$DISK_COUNT\"
    INSTANCE_HV_kernel_path=\"$INSTANCE_HV_kernel_path\"
    OS_API_VERSION=20
    VERBOSE=\"$VERBOSE\"
    export DISK_0_PATH OS_VARIANT HYPERVISOR DISK_COUNT INSTANCE_HV_kernel_path OS_API_VERSION VERBOSE
    \"@osdir@/@osname@/tools/$SUBCOMMAND\" \
"
case "$SUBCOMMAND" in
    make-image)
        verbprint 'Creating image with type "%s" from "%s" in "%s" from node "%s"\n' \
            "$IMAGE_TYPE" "$INSTANCE_NAME" "$IMAGE_DIR" "$NODE"
        eval_string="$eval_string`
            test -z "$IMAGE_TYPE" || printf -- ' -t "%s"' "$IMAGE_TYPE"
            test -z "$IMAGE_DIR" || printf -- ' -d "%s"' "$IMAGE_DIR"
            test -z "$IMAGE_NAME" || printf -- ' -n "%s"' "$IMAGE_TYPE"
            test -z "$ARCH" || printf -- ' -a "%s"' "$ARCH"
        `"
        ;;
    apply-image)
        verbprint 'Applying image to "%s" from "%s" on node "%s"\n' \
            "$INSTANCE_NAME" "$IMAGE_DIR" "$NODE"
        eval_string="$eval_string`
            test -z "$IMAGE_DIR" || printf -- ' -d "%s"' "$IMAGE_DIR"
            test -z "$IMAGE_NAME" || printf -- ' -n "%s"' "$IMAGE_TYPE"
            test -z "$ARCH" || printf -- ' -a "%s"' "$ARCH"
        `"
        ;;
    mount-disks)
        verbprint 'Mounting disks %sfor instance "%s" on node "%s"\n' \
            "`test 0 -eq $READONLY || printf 'readonly '`" "$INSTANCE_NAME" "$NODE"
        eval_string="$eval_string`test 0 -eq $READONLY || printf -- ' -r'`"
        ;;
    umount-disks)
        verbprint 'Unmounting disks for instance "%s" on node "%s"\n' \
            "$INSTANCE_NAME" "$NODE"
        ;;
    show)
        verbprint 'Showing partition table%s for instance "%s"\n' \
            "`test 0 -eq $MAP || printf ', partition headers'
              test 0 -eq $MOUNT || printf ', filesystem usage'`" "$INSTANCE_NAME"
        eval_string="$eval_string`
            test 0 -eq $MAP || printf -- ' -m'
            test 0 -eq $MOUNT || printf -- ' -M'
            test 0 -eq $READONLY || printf -- ' -r'
        `"
        ;;
    shrink|expand)
        verbprint '%sing FS%s for instance "%s"\n' \
            "`printf '%s' "$SUBCOMMAND" | tr '[a-z]' '[A-Z]'`" \
            "`case "$RESIZE" in
                  disk)
                      printf ', partition, disk'
                      ;;
                  partition)
                      printf ', partition'
                      ;;
              esac`" \
            "$INSTANCE_NAME"
        eval_string="$eval_string`test -z "$RESIZE" || printf -- ' -R "%s"' "$RESIZE"`"
        ;;
    shell)
        verbprint 'Setting up disk%s then dropping to shell for "%s"\n' \
            "`test 0 -eq $MAP || printf ', partitions'
              test 0 -eq $MOUNT || printf ', filesystems'`" \
            "$INSTANCE_NAME"
        eval_string="$eval_string`
            test 0 -eq $MAP || printf -- ' -m'
            test 0 -eq $MOUNT || printf -- ' -M'
            test 0 -eq $READONLY || printf -- ' -r'
        `"
        ;;
    chroot)
        verbprint 'Setting up disk, partitions, filesystems%s then chrooting in for "%s"\n' \
            "`test 0 -eq $READONLY || printf ' (readonly)'`" \
            "$INSTANCE_NAME"
        eval_string="$eval_string`test 0 -eq $READONLY || printf -- ' -r'`"
        ;;
    noop)
        verbprint 'Doing noop%s for "%s"\n' \
            "`test 0 -eq $MAP || printf ', mapping partitions'
              if test 1 -eq $MOUNT; then
                  printf ', mounting filesystems'
                  test 0 -eq $READONLY || printf ' (readonly)'
              fi`" \
            "$INSTANCE_NAME"
        eval_string="$eval_string`
            test 0 -eq $MAP || printf -- ' -m'
            test 0 -eq $MOUNT || printf -- ' -M'
            test 0 -eq $READONLY || printf -- ' -r'
        `"
        ;;
esac
eval_string="$eval_string \"$INSTANCE_NAME\""

if vm_is_running; then
    case "$SUBCOMMAND" in
        noop|show)
            if test 1 -eq $MAP; then
                trap - EXIT
                die 'VM is running. Can not perform "%s" while (re)mapping the partitions\n' "$SUBCOMMAND"
            fi
            ;;
        *)
            trap - EXIT
            die 'VM is running. Can not perform "%s"\n' "$INSTANCE_NAME"
            ;;
    esac
fi
if test "x$NODE" = "x$HOSTNAME"; then
    eval "$eval_string"
else
    ssh -q -n -t \
        -o PasswordAuthentication=no \
        -o UserKnownHostsFile=/dev/null \
        -o StrictHostKeyChecking=no \
        -- "$NODE" "$eval_string"
fi
test ! vm_is_running || trap - EXIT
