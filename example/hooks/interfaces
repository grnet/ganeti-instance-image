#!/bin/bash

# Copyright (C) 2010 Oregon State University
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# This is an example script that configures your network settings after
# installation. By default it sets it up to use dhcp.

set -e
. ./common.sh
debug set -x

FQDN="$INSTANCE_NAME"
SHORT_NAME="$(printf '%s' "$INSTANCE_NAME" | cut -d. -f1)"
STATIC=''

test -d "$TARGET" || die 'Missing target directory\n'

test -n "$NIC_COUNT" || die 'Missing NIC_COUNT\n'

if test -f "${NETWORKS_DIR}/instances/$FQDN'; then
    STATIC='yes'
    . "${NETWORKS_DIR}/instances/$FQDN"
    test -f "${NETWORKS_DIR}/subnets/$SUBNET" || die 'No subnet file for subnet %s!\n' "$SUBNET"
    . "${NETWORKS_DIR}/subnets/$SUBNET"
fi

resolvconf() {
    _nl='
'
    if test -n "$DNS_SERVERS" && test -n "$DNS_SEARCH" && test -n "$DNS_DOMAIN"; then
        for _server in $DNS_SERVERS; do
            nameservers="nameserver ${_server}${_nl}$nameservers"
        done

        cat >"${TARGET}/etc/resolv.conf" <<EOF
$nameservers
domain $DNS_DOMAIN
search $DNS_SEARCH
EOF
    fi
}

# Functions

systemd_setup() {
    _host_name="$1"
    # Update systemd's view of hostname
    printf '%s' "$_host_name" >"${TARGET}/etc/hostname"
    # Clear previous machine-id
    cat /dev/null >"${TARGET}/etc/machine-id"
    # Bind mount /dev to get temporary use of /dev/urandom
    mount --bind '/dev' "${TARGET}/dev"
    cleanup push "umount \"${TARGET}/dev\""
    # Set new machine-id (this works because it writes direct to file)
    chroot "$TARGET" 'systemd-machine-id-setup' >/dev/null 2>&1
    umount "${TARGET}/dev"
    cleanup pop
    # Update machine-info
    cat <<EOF >"${TARGET}/etc/machine-info"
PRETTY_HOSTNAME="$_host_name"
CHASSIS="vm"
EOF
}

debian_setup() {
    test -d "${TARGET}/etc/network" || die 'Missing target network directory\n'

    if test -z "$STATIC"; then
        cat >"${TARGET}/etc/network/interfaces" <<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp

EOF
    else
        cat >"${TARGET}/etc/network/interfaces" <<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address $ADDRESS
    netmask $NETMASK
    gateway $GATEWAY
EOF
        if test -n "$DNS_SERVERS" && test -n "$DNS_SEARCH" && test -n "$DNS_DOMAIN"; then
            cat >>"${TARGET}/etc/network/interfaces" << EOF
    dns-nameservers $DNS_SERVERS
    dns-domain $DNS_DOMAIN
    dns-search $DNS_SEARCH

EOF
        fi
    fi

    if test -n "$FQDN"; then
        if test -d "${TARGET}/etc/systemd"; then
            systemd_setup "$SHORT_NAME"
        else
            printf '%s\n' "$SHORT_NAME" >"${TARGET}/etc/hostname"
        fi
    fi
}

redhat_setup() {
    test -d "${TARGET}/etc/sysconfig/network-scripts" || die 'Missing target network directory\n'
    if test -z "$STATIC"; then
        cat >"${TARGET}/etc/sysconfig/network-scripts/ifcfg-eth0" <<EOF
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
EOF
    else
        cat >"${TARGET}/etc/sysconfig/network-scripts/ifcfg-eth0" <<EOF
DEVICE=eth0
BOOTPROTO=static
IPADDR=$ADDRESS
NETMASK=$NETMASK
ONBOOT=yes
EOF
    fi

    if test -n "$FQDN"; then
        cat >"${TARGET}/etc/sysconfig/network" << EOF
NETWORKING=yes
HOSTNAME=$FQDN
GATEWAY=$GATEWAY
EOF
        ! test -d "${TARGET}/etc/systemd" || systemd_setup "$FQDN"
    else
        cat >"${TARGET}/etc/sysconfig/network" <<EOF
NETWORKING=yes
GATEWAY=$GATEWAY
EOF
    fi

    resolvconf
}

gentoo_setup() {
    test -f "${TARGET}/etc/conf.d/net" || die 'Missing target network file\n'
    if test -z "$STATIC"; then
        cat >"${TARGET}/etc/conf.d/net" <<EOF
config_eth0=( 'dhcp' )
EOF
    else
        cat >"${TARGET}/etc/conf.d/net" <<EOF
config_eth0=( "$ADDRESS netmask $NETMASK" )
routes_eth0=( "default gw $GATEWAY" )
EOF
    fi

    resolvconf

    chroot "$TARGET" ln -sf /etc/init.d/net.lo /etc/init.d/net.eth0
    chroot "$TARGET" rc-update add net.eth0 default

    if test -n "$FQDN"; then
        # baselayout-2.x
        if test -d "${TARGET}/usr/share/openrc/"; then
            cat >"${TARGET}/etc/conf.d/hostname" <<EOF
hostname="$SHORT_NAME"
EOF
        else
            cat >"${TARGET}/etc/conf.d/hostname" <<EOF
HOSTNAME="$SHORT_NAME"
EOF
        fi
    fi
}

suse_setup() {
    test -d "${TARGET}/etc/sysconfig/network" || die 'Missing target network directory\n'
    cat >"${TARGET}/etc/sysconfig/network/ifcfg-eth0" <<EOF
BOOTPROTO='dhcp4'
STARTMODE='auto'
NAME='Ethernet Card 0'
EOF
    if test -n "$FQDN"; then
        if test -d "${TARGET}/etc/systemd"; then
            systemd_setup "$FQDN"
        else
            printf '%s' "$FQDN" >"${TARGET}/etc/HOSTNAME"
        fi
    fi

    resolvconf
}

# Main
get_os_type

if test "$NIC_COUNT" -gt 0 && test -n "$OS_TYPE"; then
    ${OS_TYPE}_setup
else
    die 'Unsupported OS_TYPE\n'
fi
