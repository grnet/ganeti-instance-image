#!/bin/bash

# Copyright (C) 2010 Oregon State University
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# This is an example script that configures your network settings after
# installation. By default it sets it up to use dhcp.

set -e
. ./common.sh
debug set -x

FQDN="$INSTANCE_NAME"
SHORT_NAME="$(printf '%s' "$INSTANCE_NAME" | cut -d. -f1)"
STATIC=''
test -d "$TARGET" || die 'Missing target directory\n'
test -n "$NIC_COUNT" || die 'Missing NIC_COUNT\n'
if test -f "${NETWORKS_DIR}/instances/$FQDN"; then
    STATIC='yes'
    . "${NETWORKS_DIR}/instances/$FQDN"
    test -f "${NETWORKS_DIR}/subnets/$SUBNET" || die 'No subnet file for subnet "%s"!\n' "$SUBNET"
    . "${NETWORKS_DIR}/subnets/$SUBNET"
fi

_resolvconf() {
    if test -n "$DNS_SERVERS" && test -n "$DNS_SEARCH" && test -n "$DNS_DOMAIN"; then
        _nameservers=''
        for _server in $DNS_SERVERS; do
            _nameservers="nameserver ${_server}
$_nameservers"
        done
        cat >"${TARGET}/etc/resolv.conf" <<EOF
$_nameservers
domain $DNS_DOMAIN
search $DNS_SEARCH
EOF
    fi
}

_systemd_hostname_setup() {
    printf 'CHASSIS="vm"\n' >"${TARGET}/etc/machine-info"
    cat /dev/null >"${TARGET}/etc/machine-id"
    mount --bind '/dev' "${TARGET}/dev" # to get temporary use of /dev/urandom
    cleanup push "umount \"${TARGET}/dev\""
    chroot "$TARGET" 'systemd-machine-id-setup' >/dev/null 2>&1 # works as it writes direct to file
    umount "${TARGET}/dev"
    cleanup pop
    printf '%s' "${FQDN:-$SHORT_NAME}" >"${TARGET}/etc/hostname"
    printf 'PRETTY_HOSTNAME="%s"\n' "${FQDN:-$SHORT_NAME}" >>"${TARGET}/etc/machine-info"
    printf 'HOSTNAME="%s"\n' "${FQDN:-$SHORT_NAME}" >>"${TARGET}/etc/sysconfig/network"
}

_systemd_network_setup() {
    if test 0 -ne $NIC_COUNT; then
        test -f "${TARGET}/etc/sysconfig/network" || die 'Missing target network file\n'
        test -d "${TARGET}/etc/sysconfig/network-scripts" || die 'Missing target network-scripts directory\n'
        if test -z "$FQDN"; then
            printf 'NETWORKING="no"\n' >"${TARGET}/etc/sysconfig/network"
        else
            printf 'NETWORKING="yes"\n' >"${TARGET}/etc/sysconfig/network"
        fi
        cat >"${TARGET}/etc/sysconfig/network-scripts/ifcfg-eth0" <<EOF
NAME='Ethernet Card 0'
DEVICE='eth0'
STARTMODE='auto'
ONBOOT='yes'
EOF
        if test -n "$STATIC"; then
            printf 'BOOTPROTO="static"\n' >>"${TARGET}/etc/sysconfig/network"
            cat >>"${TARGET}/etc/sysconfig/network-scripts/ifcfg-eth0" <<EOF
IPADDR='$ADDRESS'
NETMASK='$NETMASK'
GATEWAY='$GATEWAY'
EOF
        else
            printf 'BOOTPROTO="dhcp"\n' >>"${TARGET}/etc/sysconfig/network"
        fi
    fi
}

_debian_setup() {
    if test 'systemd' = "`get_service_manager`"; then
        _systemd_network_setup
        _systemd_hostname_setup
    else
        test -d "${TARGET}/etc/network" || die 'Missing target network directory\n'
        if test 0 -ne $NIC_COUNT; then
            if test -z "$STATIC"; then
                cat >"${TARGET}/etc/network/interfaces" <<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp

EOF
            else
                cat >"${TARGET}/etc/network/interfaces" <<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address $ADDRESS
    netmask $NETMASK
    gateway $GATEWAY
EOF
            fi
        fi
        printf '%s\n' "${FQDN:-$SHORT_NAME}" >"${TARGET}/etc/hostname"
    fi
}

_gentoo_setup() {
    if test 0 -ne $NIC_COUNT; then
        test -f "${TARGET}/etc/conf.d/net" || die 'Missing target network file\n'
        if test -z "$STATIC"; then
            cat >"${TARGET}/etc/conf.d/net" <<EOF
config_eth0=( "dhcp" )
EOF
        else
            cat >"${TARGET}/etc/conf.d/net" <<EOF
config_eth0=( "$ADDRESS netmask $NETMASK" )
routes_eth0=( "default gw $GATEWAY" )
EOF
        fi
        chroot "$TARGET" ln -sf /etc/init.d/net.lo /etc/init.d/net.eth0
        chroot "$TARGET" rc-update add net.eth0 default
    fi
    if test -n "$FQDN"; then
        # baselayout-2.x
        if test -d "${TARGET}/usr/share/openrc/"; then
            printf 'hostname="%s"\n' "$SHORT_NAME" >"${TARGET}/etc/conf.d/hostname"
        else
            printf 'HOSTNAME="%s"\n' "$SHORT_NAME" >"${TARGET}/etc/conf.d/hostname"
        fi
    fi
}

_suse_setup() { _systemd_network_setup; _systemd_hostname_setup; }

_redhat_setup() { _systemd_network_setup; _systemd_hostname_setup; }

get_os_type
if test -n "$OS_TYPE"; then
    "_${OS_TYPE}_setup"
    _resolvconf
else
    die 'Unsupported OS_TYPE\n'
fi
